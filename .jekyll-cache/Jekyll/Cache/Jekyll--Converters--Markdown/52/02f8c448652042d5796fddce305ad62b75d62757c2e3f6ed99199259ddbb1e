I"ág<h2 id="campeonato-programarobot">Campeonato ProgramaRobot</h2>

<p>Este a√±o se celebra la segunda edici√≥n del campeonato dentro de las <a href="https://jnr2017.ai2.upv.es/es/inicio/">Jornadas Nacionales de Rob√≥tica</a>, organizadas por el Comit√© Espa√±ol de Autom√°tica (CEA), a trav√©s de su Grupo Tem√°tico de Rob√≥tica (GTRob). Tendr√°n lugar en Valencia en junio de 2017.</p>

<p><u>Horario (9 de junio 2017)</u></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">*</span> 11:30h rondas clasificatorias
<span class="k">*</span> 13h ronda final
</code></pre></div></div>

<font color="red">Se puede participar en el campeonato y seguirlo por internet en directo a trav√©s del </font>
<p><a href="https://www.youtube.com/channel/UCgmUgpircYAv_QhLQziHJOQ">canal de YouTube de JdeRobot</a></p>

<!-- Patrocinadores -->
<p><img src="/assets/images/activities/competitions/2017/circulos1600.png" width="20%" height="60%" />
<img src="/assets/images/activities/competitions/2017/logoURJC.jpg" width="20%" height="60%" />
<img src="/assets/images/activities/competitions/2017/ceaGtrob.jpg" width="20%" height="60%" />
<img src="/assets/images/activities/competitions/2017/deloitte.jpg" width="15%" height="60%" />
<img src="/assets/images/activities/competitions/2017/robocity.jpg" width="20%" height="60%" /></p>

<p><br /></p>

<table>
  <tbody>
    <tr>
      <td><font color="red"> RESUMEN EDICI√ìN 2017  </font></td>
      <td>¬†</td>
    </tr>
    <tr>
      <td><strong>Video resumen</strong></td>
      <td><strong>Presentaci√≥n en directo</strong></td>
    </tr>
    <tr>
      <td><a href="https://www.youtube.com/watch?v=1Fm3TLNSYU8&amp;feature=youtu.be">Video</a></td>
      <td><img src="/assets/images/activities/competitions/2017/exposicionJnr.png" width="80%" height="60%" /></td>
    </tr>
    <tr>
      <td><a href="https://www.youtube.com/watch?v=8odOHBdqlOQ">v√≠deo completo</a></td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<h2 id="introducci√≥n">Introducci√≥n</h2>

<p>Los drones son robots a√©reos que han ganado popularidad en los √∫ltimos a√±os. Nacieron en el √°mbito militar y con el abaratamiento de sus costes se han abierto posibilidades de uso comercial en varias aplicaciones civiles como la monitorizaci√≥n de infraestructuras, agricultura, vigilancia, grabaci√≥n de eventos, etc.. Son robots, y como tales, est√°n compuestos de sensores, actuadores y procesadores en el lado hardware. Su inteligencia sin embargo reside en su software.</p>

<p>Este campeonato plantea como reto la <strong>programaci√≥n de un cuadric√≥ptero (gato) para que busque, persiga a otro robot a√©reo (rat√≥n) y se mantenga cerca de √©l</strong>. En el Laboratorio de Rob√≥tica de la Universidad Rey Juan Carlos hemos preparado la infraestructura del campeonato utilizando el simulador Gazebo y la plataforma software JdeRobot, que simplifica el acceso a sensores y actuadores y permite programar el comportamiento del gato en <font color="red">lenguaje Python</font>.</p>

<div class="embed-container">
  <iframe src="https://www.youtube.com/embed/-rN0cWcEXk0" width="700" height="480" frameborder="0" allowfullscreen="">
  </iframe>
</div>

<p><br /></p>

<h2 id="infraestructura-software">Infraestructura software</h2>

<p>El entorno necesario para participar y probar es f√°cil de usar y de instalar. Consta de (a) el simulador Gazebo, (b) la plataforma software JdeRobot y (c) JdeRobot-Academy. Los dos primeros se instalan como paquetes sobre Ubuntu Linux (16.04), el tercero es una colecci√≥n de programas en Python que se descargan desde GitHub. Tambi√©n se pueden instalar en ordenadores Windows y MacOS utilizando contenedores Docker.</p>

<h3 id="simulador-gazebo"><strong>Simulador Gazebo</strong></h3>

<p>Los simuladores en rob√≥tica se usan para crear mundos virtuales y observar c√≥mo un robot emulado act√∫a en dicho mundo. Con ellos se pueden programar aplicaciones rob√≥ticas y probarlas sin depender de un robot f√≠sico, haciendo que las pruebas sean m√°s baratas y menos peligrosas. Si el robot se choca o tiene un comportamiento extra√±o que no se hab√≠a previsto es posible reiniciar la simulaci√≥n sin que el modelo real (o las personas cercanas) haya sufrido da√±os. Algunos de estos simuladores representan los mundos en 3D y recrean la f√≠sica de √©ste (gravedad, empujes, colisiones‚Ä¶) emulando de modo muy realista el movimiento del robot en distintos escenarios.</p>

<p><a href="http://gazebosim.org/">Gazebo</a> es un simulador muy completo que distribuye la organizaci√≥n OSRF (Open Source Robotics Foundation) como software libre y se ha convertido en una referencia internacional en rob√≥tica. Cuenta con modelos de robots que pueden usarse directamente, adem√°s de incluir la posibilidad de que el usuario cree su propio robot y entornos (e.g un campo de f√∫tbol de la RoboCup, un pueblo o el interior de un edificio) incluyendo texturas, luces y sombras. Incorpora varios motores de f√≠sicas y dispone de una amplia clase de sensores como c√°maras, l√°sers, sensores de contacto, IMU, etc. Este simulador fue el seleccionado hace cuatro a√±os por el DARPA norteamericano para su competici√≥n internacional DRC, inyectando varios millones de dolares en su desarrollo.</p>

<p>Hemos simplificado su instalaci√≥n y se hace autom√°ticamente cuando se instala el paquete debian de JdeRobot.</p>

<h3 id="plataforma-jderobot"><strong>Plataforma JdeRobot</strong></h3>

<p><a href="https://jderobot.github.io/">JdeRobot</a> es una plataforma de software libre para el desarrollo de aplicaciones rob√≥ticas y de visi√≥n artificial. Este proyecto est√° mantenido por el Laboratorio de Rob√≥tica de la Universidad Rey Juan Carlos desde 2008. Ha sido recientemente financiado por Google y es 100% compatible con <a href="https://www.ros.org/">ROS</a> (en concreto con ROS Kinetic).</p>

<p>Ofrece un entorno de programaci√≥n basado en componentes en el cual la aplicaci√≥n rob√≥tica est√° formada por varios componentes. Cada uno se ejecuta como un proceso e interoperan entre s√≠ a trav√©s del middleware de comunicaciones ICE (Internet Communications Engine, software libre de la empresa <a href="https://zeroc.com">ZeroC</a>) o a trav√©s de mensajes de ROS. Pueden estar escritos en diferentes lenguajes (C++, Python, Java, etc..) pero interoperan sin problemas.</p>

<p>Esta plataforma abstrae al programador del acceso a los dispositivos hardware del robot, como la lectura de los sensores o el env√≠o de comandos a los motores. Simplifica el acceso a ellos, obteniendo la lectura de un sensor (aunque sea remoto) a trav√©s de una llamada a funci√≥n.</p>

<p>El c√≥digo fuente de JdeRobot est√° en <a href="https://github.com/JdeRobot/base">GitHub</a> y para simplificar su instalaci√≥n hemos preparado paquetes debian. Para instalarlo desde paquete sigue estas <a href="https://github.com/JdeRobot/base#installation">instrucciones</a>, concretamente las secciones Requirements: Linux package sources e Installation for running JdeRobot.</p>

<h3 id="jderobot-academy"><strong>JdeRobot-Academy</strong></h3>

<p>Este software es una <a href="http://jderobot.github.io/RoboticsAcademy/">colecci√≥n de pr√°cticas</a> y ejercicios de programaci√≥n de robots, que incluyen una para el juego del gato y rat√≥n. Es fundamentalmente un conjunto programas en Python.</p>

<p>Para instalar este software basta clonar su <a href="https://github.com/JdeRobot/RoboticsAcademy">repositorio de GitHub</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd
mkdir </span>campeonato
<span class="nb">cd </span>campeonato
git clone https://github.com/JdeRobot/Academy.git
</code></pre></div></div>

<p><br /></p>

<h2 id="prueba-el-juego-del-gato-y-el-rat√≥n-con-drones">Prueba: el juego del gato y el rat√≥n con drones</h2>

<p>La prueba consiste en programar en lenguaje Python la inteligencia de un drone cuadric√≥ptero que llamamos gato. Su objetivo es buscar, perseguir y mantenerse cerca de otro cuadric√≥ptero similar que llamamos rat√≥n. El gato tiene dos c√°maras (una frontal y otra ventral) y un sensor de posici√≥n 3D como equipamiento sensorial. Sus actuadores son los motores de sus h√©lices. El rat√≥n es de color rojo, para facilitar su detecci√≥n en las im√°genes.</p>

<p>Para la prueba se ha preparado un mundo 3D en el simulador Gazebo. En este nuevo mundo tendremos dos robots: el cuadric√≥ptero AR.Drone que hace de rat√≥n (que tiene color rojo) y el cuadric√≥ptero gato. No hay m√°s obst√°culos cercanos en el mundo, salvo el suelo. En el siguiente video se muestra un gato de ejemplo persiguiendo a un rat√≥n:</p>

<p><img src="/assets/images/activities/competitions/2017/escenaCompleta.png" width="100%" height="60%" /></p>

<h3 id="dise√±o-de-la-prueba"><strong>Dise√±o de la prueba</strong></h3>

<p>Para lanzar el entorno de la prueba hay que:</p>

<ol>
  <li>
    <p>ejecutar el simulador Gazebo con el fichero del mundo adecuado, que arranca el escenario de la prueba.</p>
  </li>
  <li>
    <p>ejecutar el componente mouse que gobierna el comportamiento del drone rat√≥n.</p>
  </li>
  <li>
    <p>arrancar el cat.py que gobierna el comportamiento del drone gato.</p>
  </li>
  <li>
    <p>Opcionalmente se puede ejecutar el componente √°rbitro que mide la puntuaci√≥n.</p>
  </li>
</ol>

<p><img src="/assets/images/activities/competitions/2017/arquitectura.png" width="100%" height="60%" /></p>

<h3 id="el-escenario"><strong>El escenario</strong></h3>

<p>Una vez que la infraestructura est√° instalada podemos arrancar Gazebo con el fichero del mundo del escenario. Desde un terminal ejecuta:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gazebo ardrone-trees-simple.world
</code></pre></div></div>

<p>Si tu ordenador anda justo de recursos prueba a arrancar el simulador sin interfaz gr√°fico:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gzserver ardrone-trees-simple.world
</code></pre></div></div>

<p><br /></p>

<h2 id="el-gato">El gato</h2>

<p>Hemos preparado un componente en JdeRobot-Academy que permite teleoperar el AR.Drone, insertar en √©l y ejecutar el c√≥digo de cada participante. Este componente se llama <strong>cat.py</strong>, obtiene los datos sensoriales del drone (im√°genes, inclin√≥metros, br√∫jula, etc.) y muestra una interfaz gr√°fica para el manejo del AR.Drone y la visualizaci√≥n de sus datos sensoriales.</p>

<p><img src="/assets/images/activities/competitions/2017/catpy.png" width="100%" height="60%" /></p>

<p>El c√≥digo de tu prueba se empotrar√° dentro de este componente, y es tu c√≥digo el que tomar√° las decisiones de movimiento adecuadas en funci√≥n de la informaci√≥n sensorial. En esto reside la inteligencia del cuadric√≥ptero y que su comportamiento sea bueno o no. El componente arranca en modo teleoperaci√≥n, para que puedas gobernar el movimiento del cuadric√≥ptero manualmente. Con el deslizador vertical se puede subir o bajar de altura y con la cruceta hacerlo girar y/o avanzar en horizontal.</p>

<ol>
  <li>
    <p>Antes de ejecutar tu algoritmo pulsa sobre el bot√≥n <strong>Play</strong>, y cat.py entra en modo autom√°tico invocando peri√≥dicamente a tu c√≥digo inserto en <strong>MyAlgorithm.py</strong>, el m√©todo execute. Lo llama unas 10 veces por segundo, lo que permite a tu software tener el control en todo momento del movimiento del drone.</p>
  </li>
  <li>
    <p>Para terminar con la ejecuci√≥n de tu algoritmo pulsa el bot√≥n <strong>Stop</strong>, que hace entrar a cat.py nuevamente en modo teleoperaci√≥n.</p>
  </li>
</ol>

<p>Ahora en otro terminal ejecutaremos el componente cat_py:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/campeonato/src/drone_cat_mouse/cat_py/
python2 cat.py cat_conf.cfg 
</code></pre></div></div>

<h3 id="programando-el-drone-gato-dentro-de-catpy"><strong>Programando el drone gato dentro de cat.py</strong></h3>

<p>El comportamiento del cuadric√≥ptero gato t√≠picamente tendr√° una parte perceptiva y una parte de control. La parte de percepci√≥n recoge los datos sensoriales (la c√°mara principalmente) y los analiza, extrae informaci√≥n de ellos. La parte de control decide qu√© movimiento es el adecuado y emite √≥rdenes a los motores del robot.</p>

<p>Cat.py tiene naturaleza iterativa, ejecuta continuamente iteraciones y en cada una de ellas se percibe y se controla. El componente Cat.py se apoya en las interfaces ICE de JdeRobot para dialogar con el simulador Gazebo. En particular con los plugins de Gazebo que materializan los sensores y actuadores del cuadric√≥ptero. Todo este di√°logo queda oculto al programador, que simplemente tiene unos cuantos m√©todos en Python como interfaz de programaci√≥n para leer los datos de la c√°mara, del sensor GPS y ordenar comandos a los motores del cuadric√≥ptero.</p>

<p>Para insertar tu c√≥digo en cat.py y con ello implementar tu algoritmo se recomienda seguir los siguientes pasos:</p>

<ol>
  <li>
    <p>cd ~/campeonato/src/drone_cat_mouse/cat_py/</p>
  </li>
  <li>
    <p>Abre con tu entorno de programaci√≥n el fichero cat.py y dir√≠gete a la clase MyAlgorithm que se encuentra en el fichero <strong>MyAlgorithm.py</strong>.</p>
  </li>
  <li>
    <p>Dir√≠gete a la definici√≥n del m√©todo execute().</p>
  </li>
  <li>
    <p>En primer lugar se recomienda implementar un m√©todo que nos permita detectar en la imagen obtenida del drone rat√≥n, obteniendo su posici√≥n en p√≠xeles. T√≠picamente el centro de masas de los p√≠xeles que superan el filtro rojo puede ser una buena aproximaci√≥n del centro del robot rat√≥n (hay otras mejores).</p>
  </li>
  <li>
    <p>Con el robot rat√≥n detectado en la imagen, el siguiente paso es decidir qu√© movimiento es el adecuado ordenar a los motores del gato con el m√©todo sendCMDVel(). Aqu√≠ hay muchas maneras de decidirlo: control basado en casos, control PID, aut√≥matas, etc.. Aqu√≠ es donde entra en juego tu habilidad.</p>
  </li>
</ol>

<p>Adem√°s de la descripci√≥n siguiente del API de programaci√≥n del drone en Python, tienes m√°s detalles suyos <a href="https://github.com/JdeRobot/RoboticsAcademy/tree/master/exercises/drone_cat_mouse">aqu√≠</a></p>

<h3 id="recogiendo-im√°genes"><strong>Recogiendo im√°genes</strong></h3>

<p>Las im√°genes de la c√°mara frontal del gato se obtienen desde la clase MyAlgorithm. La instrucci√≥n <strong>getImage</strong> devuelve la imagen de la c√°mara activa del drone y la almacena en la variable droneImage. A partir de este momento, dicha variable contiene una imagen que podremos tratar como queramos. Por ejemplo usando la biblioteca OpenCV de visi√≥n artificial.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>droneImage <span class="o">=</span> self.sensor.getImage<span class="o">()</span>
</code></pre></div></div>

<p>Puedes cambiar la c√°mara activa del drone invocando el siguiente m√©todo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.toggleCam<span class="o">()</span>
</code></pre></div></div>

<p>Para esta prueba necesitaremos detectar al robot rat√≥n. El rat√≥n es de color rojo. T√≠picamente se localiza muy bien dentro de las im√°genes usando un filtro HSV convenientemente ajustado.</p>

<h3 id="leyendo-la-posici√≥n-y-orientaci√≥n-en-3d-gps-e-inclin√≥metros"><strong>Leyendo la posici√≥n y orientaci√≥n en 3D (GPS e inclin√≥metros)</strong></h3>

<p>En el escenario del campeonato se usan dos sistema de referencia: uno absoluto y otro solidario con el cuadric√≥ptero. Son los que se muestran en la Figura \ref{fig:drone_referencia}.</p>

<p><img src="/assets/images/activities/competitions/2017/droneCoordenadas.png" width="100%" height="60%" /></p>

<p>El seguimiento del rat√≥n se puede abordar sin necesidad de saber la posici√≥n absoluta del drone en el mundo. Sin embargo, puede ser √∫til si se quiere optimizar la b√∫squeda del rat√≥n cuando no se aprecia en la imagen. Para obtener la posici√≥n 3D se tiene el m√©todo <strong>getPose3D</strong>. Las instrucciones siguientes entregan las coordenadas X,Y y Z del drone dentro del mundo de Gazebo.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.getPose3D<span class="o">()</span>.x
self.sensor.getPose3D<span class="o">()</span>.y
self.sensor.getPose3D<span class="o">()</span>.z
</code></pre></div></div>

<p>Para obtener la orientaci√≥n (cuaterni√≥n) del drone:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.getPose3D<span class="o">()</span>.q0
self.sensor.getPose3D<span class="o">()</span>.q1
self.sensor.getPose3D<span class="o">()</span>.q2
self.sensor.getPose3D<span class="o">()</span>.q3
</code></pre></div></div>

<h3 id="ordenando-movimiento-a-los-motores-del-drone"><strong>Ordenando movimiento a los motores del drone</strong></h3>

<p>La clase sensor dentro de cat.py incluye varios m√©todos para interactuar con el drone y ordenarle movimiento. En particular el m√©todo sendCMDVel() env√≠a comandos de velocidad de traslaci√≥n y velocidades de rotaci√≥n. Las velocidades de traslaci√≥n siguen el sistema de referencia que se muestra en la figura anterior, solidario con el propio drone: vx de frente/atr√°s, vy izquierda/derecha y vz arriba/abajo. La velocidad de yaw marca el giro alrededor de un eje vertical, perpendicular al plano del drone. El m√©todo sendCMDVel() recibe 6 par√°metros: vy, vx, vz, yaw, roll y pitch. Cada uno de los valores se debe indicar entre -1 y 1. Los valores roll y pitch no tienen efecto en el mundo simulado de Gazebo.</p>

<p>Por ejemplo, el comando siguiente ordena al drone que se mueva de manera inmediata hacia delante a una velocidad de 0.5 (a la mitad de potencia). Esta √≥rden estar√° activa hasta que se le indique otra cosa.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.sendCMDVel<span class="o">(</span>0,0.5,0,0,0,0<span class="o">)</span>
</code></pre></div></div>

<p>El m√©todo sendCMDVel() permite comandar distintas √≥rdenes a la vez. El comando siguiente provoca que el drone se mueva hacia delante a una velocidad de 0.5, a la vez se traslade hacia la derecha a 0.4 y simult√°neamente se eleve en el eje Z a 0.2 y rote sobre el eje Z a una velocidad de 0.1.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.sendCMDVel<span class="o">(</span><span class="nt">-0</span>.4,0.5,0.2,0.1,0,0<span class="o">)</span>
</code></pre></div></div>

<p>Finalmente, para detener el movimiento del drone se puede utilizar la siguiente instrucci√≥n.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.sendCMDVel<span class="o">(</span>0,0,0,0,0,0<span class="o">)</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="ratones">Ratones</h2>

<p>Para probar y afinar tu gato puedes dejar el rat√≥n quieto, pero tambi√©n puedes teleoperar al rat√≥n con la herramienta uav_viewer de JdeRobot conectado a √©l, mientras que a la vez cat.py se conecta al gato y ejecuta el c√≥digo que hayas preparado.</p>

<p>Tambi√©n hemos preparado un <strong>rat√≥n de entrenamiento</strong> que implementa la mayor√≠a de movimientos que tendr√°n los ratones de las mangas puntuables. Este rat√≥n tiene una dificultad incremental, empezando con unos movimientos muy simples a la velocidad m√≠nima, continuando con unos movimientos m√°s complejos a una velocidad media y terminando con movimientos a√∫n m√°s complejos a la m√°xima velocidad.</p>

<div class="embed-container">
  <iframe src="https://www.youtube.com/embed/uuHWCvgGzog" width="700" height="480" frameborder="0" allowfullscreen="">
  </iframe>
</div>

<p><br /></p>

<p>Pod√©is descargarlo de <a href="https://jderobot.org/store/jmplaza/uploads/campeonato-drones/ratones.tgz">aqu√≠</a>, que incluye varios ratones (para m√°quinas de 64bits) para que practiqueis con ellos. Una vez descargado, copia ese fichero comprimido al directorio adecuado de JdeRobot-Academy y descompr√≠melo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp </span>ratones.tgz ~/campeonato/src/drone_cat_mouse/mice
<span class="nb">cd</span> ~/campeonato/src/drone_cat_mouse/mice
<span class="nb">tar</span> <span class="nt">-zxvf</span> ratones.tgz
</code></pre></div></div>

<p>Cada vez que quieras ejecutar el rat√≥n, ya con el escenario en Gazebo arrancado, ejecuta:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/campeonato/src/drone_cat_mouse/mice
./trainning_mouse trainning.cfg
</code></pre></div></div>

<p>O bien:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/campeonato/src/drone_cat_mouse/mice
./q1_mouse q1.cfg
</code></pre></div></div>

<p>Durante la competici√≥n se lanzar√°n distintos ratones programados por la organizaci√≥n, unos m√°s sencillos otros m√°s sofisticados, que ser√°n los mismos para todos los participantes.</p>

<p><br /></p>

<h2 id="un-√°rbitro-eval√∫a-tu-algoritmo">Un √°rbitro eval√∫a tu algoritmo</h2>

<p>Para determinar la puntuaci√≥n de tu algoritmo hemos creado un √°rbitro que mide la distancia real instant√°nea a la que se encuentra tu gato del rat√≥n durante 2 minutos. Adem√°s, muestra en pantalla la evoluci√≥n temporal a lo largo de la duraci√≥n de cada manga. Cuando est√° por debajo del umbral considerado cercano la pinta en verde y cuando est√° por encima, rojo. Mientras que el gato se encuentre cerca del rat√≥n se incrementar√° la puntuaci√≥n, si tu gato no est√° lo suficientemente cerca del gato no puntuar√°. El √°rbitro consta de un plugin y un visor.</p>

<p><img src="/assets/images/activities/competitions/2017/arbitro.png" width="100%" height="60%" /></p>

<p>Para lanzar al √°rbitro hay que hacerlo (justo) despu√©s de arrancar el escenario, el gato y el rat√≥n, no antes. En un terminal ejecuta:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/campeonato/src/drone_cat_mouse/referee
python2 referee.py referee.cfg 
</code></pre></div></div>

<p><br /></p>

<h2 id="organizaci√≥n-evaluaci√≥n-y-premio">Organizaci√≥n, evaluaci√≥n y premio</h2>

<font color="red">Para participar es OBLIGATORIO rellenar este</font>
<p><a href="https://docs.google.com/forms/d/e/1FAIpQLSdMp7llxybK5Ab4MKbWSmc31uU3iccDt-s2GNdLPUP69lMfrw/viewform">FORMULARIO DE INSCRIPCI√ìN</a>. Cada participante deber inscribirse individualmente. Para avisos y comunicaci√≥n con los participantes usaremos la lista de correo <strong>campeonatodrones@gsyc.es</strong> (que se borrar√° una vez realizado el campeonato). Para enviar mensajes hay que rellenar previamente el formulario de inscripci√≥n y desde la organizaci√≥n te damos de alta en esa lista de correo.</p>

<p>Despues hay que programar, retocando adecuadamente el fichero <strong>MyAlgorithm.py</strong> (el m√©todo <strong>execute</strong>), y enviarlo a la organizaci√≥n por correo electr√≥nico (josemaria.plaza AT urjc.es) antes del <strong>8 de junio 2017 (a las 12h)</strong> junto con los datos personales. Pasado ese d√≠a la organizaci√≥n publicar√° en la web la lista de todos los participantes. Las finales del campeonato tendr√°n lugar el <strong>9 de junio de 2017</strong>, dentro de las <a href="http://jnr2017.ai2.upv.es/es/inicio/">Jornadas Nacionales de Rob√≥tica</a>. Ese d√≠a se retransmitir√° en streaming por YouTube la sesi√≥n final (Q3). Si el volumen de participantes lo permite, tambi√©n las sesiones eliminatorias Q1 y Q2.</p>

<p>La evaluaci√≥n consiste arrancar a tu robot gato en diferentes configuraciones (2 mangas) con el robot rat√≥n que hemos preparado y en una m√°quina de la organizaci√≥n. Tu fichero <strong>MyAlgorithm.py</strong> se incorporar√° a <strong>cat.py</strong> para que gobierne el comportamiento del cuadric√≥ptero. La m√°quina y el comportamiento del rat√≥n es exactamente el mismo para todos los participantes. En cada manga, de 2 minutos, tu robot comienza en una posici√≥n relativa diferente respecto del rat√≥n, deber√° buscarlo y perseguirlo. El componente √°rbitro mide cu√°ntos segundos de esas ejecuciones tu gato ha estado suficientemente cerca del rat√≥n y lo muestra en pantalla. Esa es la puntuaci√≥n.</p>

<p>El campeonato est√° organizado en fases eliminatorias, donde tu gato se va enfrentando paulatinamente a ratones m√°s dif√≠ciles de seguir. Tras la primera ronda (Q1) pasan a la siguiente los mejores 20 gatos, en la segunda (Q2) los mejores 10 y en la √∫ltima (Q3) ya se deciden las posiciones definitivas en el campeonato. Gana el campeonato aquel gato que est√© cerca del rat√≥n durante m√°s tiempo en el acumulado de las dos mangas de Q3. El jurado ser√° una comisi√≥n de expertos de la Universidad Rey Juan Carlos, que podr√° dejar el premio desierto si la soluci√≥n no es de suficiente calidad y descalificar a los participantes que choquen recurrentemente con el rat√≥n. Sus decisiones son inapelables.</p>

<p>El objetivo del campeonato es proponer un reto bonito y dar la oportunidad de medir tu soluci√≥n con otros compa√±eros competidores.</p>

<p><br /></p>

<h2 id="preguntas-frecuentes">Preguntas frecuentes</h2>

<h3 id="qui√©nes-pueden-participar"><strong>¬øQui√©nes pueden participar?</strong></h3>

<p>Cualquiera, es un campeonato abierto. Est√° dirigido a estudiantes universitarios de ingenier√≠a de toda Espa√±a (de grado, master, doctorado‚Ä¶) pero est√° abierto a cualquier participante.</p>

<h3 id="puedo-utilizar-otro-middleware-para-acceder-al-robot-a√©reo"><strong>¬øPuedo utilizar otro middleware para acceder al robot a√©reo?</strong></h3>

<p>Para el campeonato, no. M√°s all√° del campeonato, usa el que quieras :-). Para que la comparativa sea justa todos los participantes utilizar√°n la misma versi√≥n del simulador Gazebo y la misma versi√≥n del middleware JdeRobot. De hecho han de entregar su c√≥digo en un fichero MyAlgorithms.py que se prueba dentro del componente cat.py de JdeRobot-Academy.</p>

:ET