I"˚q<h2 id="programarobot-dronecampeones">ProgramaRobot: DRONECAMPEONES</h2>

<p><u>Horario (8 de abril 2016)</u></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">*</span> 10h rondas clasificatorias, laboratorio de Rob√≥tica <span class="o">(</span>L3104 campus Fuenlabrada<span class="o">)</span>
<span class="k">*</span> 12h conferencia rob√≥tica, a cargo de Dr. Antonio Barrientos <span class="o">(</span>UPM<span class="o">)</span>
<span class="k">*</span> 13h ronda final
<span class="k">*</span> Entrega de premios: 14h, sal√≥n de grados edificio de Gesti√≥n 
</code></pre></div></div>

<font color="red">Se puede seguir en vivo por streaming en el</font>
<p><a href="https://www.youtube.com/channel/UCgmUgpircYAv_QhLQziHJOQ">canal de YouTube de JdeRobot</a></p>

<h2 id="introducci√≥n">Introducci√≥n</h2>

<p>Los drones son robots a√©reos que han ganado popularidad en los √∫ltimos a√±os. Nacieron en el √°mbito militar y con el abaratamiento de sus costes se han abierto posibilidades de uso comercial en varias aplicaciones civiles como la monitorizaci√≥n de infraestructuras, agricultura, vigilancia, grabaci√≥n de eventos, etc.. Son robots, y como tales, est√°n compuestos de sensores, actuadores y procesadores en el lado hardware. Su inteligencia sin embargo reside en su software.</p>

<p>Este campeonato plantea como reto la <strong>programaci√≥n de un cuadric√≥ptero (que llamaremos gato) para que busque, persiga a otro robot a√©reo (que llamaremos rat√≥n) y se mantenga cerca de √©l</strong>. En el Laboratorio de Rob√≥tica de la Universidad Rey Juan Carlos hemos preparado el entorno del campeonato utilizando el simulador Gazebo y la plataforma rob√≥tica JdeRobot. JdeRobot simplifica el acceso a sensores y actuadores y permite programar el comportamiento del gato en lenguaje Python.</p>

<font color="red">Para participar es OBLIGATORIO inscribirse env√≠ando un correo a josemaria.plaza AT urjc.es</font>
<p>antes del 15 de marzo (para dimensionar y poder organizarlo bien). Cada participante deber inscribirse individualmente. El premio para el ganador es un cuadric√≥ptero real (Ar.Drone2 de Parrot). Para los mensajes a los participantes usaremos la lista de correo <strong>campeonatodrones@gsyc.es</strong> (te puedes registrar <a href="https://gsyc.urjc.es/cgi-bin/mailman/listinfo/campeonatodrones">aqu√≠</a>, y se borrar√° una vez realizado el campeonato).</p>

<p><img src="/assets/images/activities/competitions/2016/escenaCompleta.png" width="100%" height="60%" /></p>

<p><br /></p>

<h2 id="entorno-software">Entorno software</h2>

<h3 id="simulador-gazebo"><strong>Simulador Gazebo</strong></h3>

<p>Los simuladores en rob√≥tica son usados para crear mundos virtuales y observar c√≥mo un robot emulado act√∫a en dicho entorno. De esta forma se pueden programar aplicaciones rob√≥ticas y probarlas sin depender de un robot f√≠sico, haciendo que las pruebas sean m√°s baratas y menos peligrosas. Si el robot se choca o tiene un comportamiento extra√±o que no se hab√≠a previsto es posible reiniciar la simulaci√≥n sin que el modelo real (o las personas cercanas) haya sufrido da√±os. Algunos de estos simuladores representan los mundos en 3D y recrean la f√≠sica de √©ste (gravedad, empujes, colisiones‚Ä¶) emulando de modo muy realista el movimiento del robot en distintos escenarios.</p>

<p><img src="/assets/images/activities/competitions/2016/gazeboVrc.jpg" width="100%" height="60%" /></p>

<p><a href="gazebosim.org">Gazebo</a> es un simulador muy completo que distribuye la organizaci√≥n OSRF (Open Source Robotics Foundation) como software libre y se ha convertido en una referencia internacional en rob√≥tica. Cuenta con modelos de robots que pueden usarse directamente, adem√°s de incluir la posibilidad de que el usuario cree su propio robot y entornos (e.g un campo de f√∫tbol de la RoboCup, un pueblo o el interior de un edificio) incluyendo texturas, luces y sombras. Incorpora varios motores de f√≠sicas y dispone de una amplia clase de sensores como c√°maras, l√°sers, sensores de contacto, IMU, etc. Este simulador fue el seleccionado hace cuatro a√±os por el DARPA norteamericano para su competici√≥n internacional DRC, inyectando varios millones de dolares en su desarrollo.</p>

<h3 id="plataforma-jderobot"><strong>Plataforma JdeRobot</strong></h3>

<p><a href="https://jderobot.github.io/">JdeRobot</a> es una plataforma de software libre para el desarrollo de aplicaciones con robots y visi√≥n artificial. Este proyecto ha sido desarrollado y est√° mantenido por el Laboratorio de Rob√≥tica de la Universidad Rey Juan Carlos desde 2008. Ha sido recientemente financiada por Google.</p>

<p>Ofrece un entorno de programaci√≥n basado en componentes donde la aplicaci√≥n est√° formada por varios componentes y cada uno se ejecuta como un proceso. Los componentes interoperan entre s√≠ a trav√©s del middleware de comunicaciones ICE(Internet Communications Engine, software libre de la empresa <a href="https://zeroc.com/">ZeroC</a>). Adem√°s, pueden estar escritos en diferentes lenguajes (C++, Python, Java, etc..) pero interoperan sin problemas.</p>

<p>Esta plataforma abstrae al programador del acceso a los dispositivos hardware del robot, como la lectura de los sensores o el env√≠o de comandos a los motores. Simplifica el acceso a ellos, permitiendo obtener la lectura de un sensor (aunque sea remoto) a trav√©s de una llamada a funci√≥n.</p>

<h3 id="instalaci√≥n-de-la-infraestructura"><strong>Instalaci√≥n de la infraestructura</strong></h3>

<p>En primer lugar es necesario instalar JdeRobot, para ello sigue las siguientes <a href="https://github.com/JdeRobot/base#installation">instrucciones</a> concretamente las secciones Requirements: Linux package sources y Installation for running JdeRobot. A continuaci√≥n es necesario configurar el simulador gazebo <a href="http://jderobot.github.io/RoboticsAcademy/">instrucciones</a>. Para poder instalar el componente cat_py es necesario instalar el paquete teaching_robotics tienes las instrucciones <a href="http://jderobot.github.io/RoboticsAcademy/">aqu√≠</a>. Finalmente ejecuta los siguientes comandos para terminar con la configuraci√≥n de la infraestructura:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/teaching_robotics/src/cat_py/
<span class="nb">mkdir </span>gazebo
<span class="nb">cd </span>gazebo
<span class="nb">cp</span> /usr/local/share/jderobot/gazebo/worlds/dronecampeones.world <span class="nb">.</span>
</code></pre></div></div>

<h3 id="componente-cat_py"><strong>Componente Cat_py</strong></h3>

<p>Hemos preparado un componente de JdeRobot en Python que permite teleoperar el AR.Drone e insertar en √©l el c√≥digo de cada participante para ejecutarlo. Este componente obtiene los datos sensoriales del drone (im√°genes, inclin√≥metros, br√∫jula, etc.) y muestra una interfaz gr√°fica para el manejo del AR.Drone y la visualizaci√≥n de sus datos sensoriales.</p>

<p><img src="/assets/images/activities/competitions/2016/esquemaConSimu.png" width="100%" height="60%" /></p>

<p><br /></p>

<p><img src="/assets/images/activities/competitions/2016/introrob.png" width="32%" height="70%" />
<img src="/assets/images/activities/competitions/2016/introrobCamera.png" width="32%" height="70%" />
<img src="/assets/images/activities/competitions/2016/introrobSensors.png" width="32%" height="60%" /></p>

<p>El c√≥digo de tu prueba se empotrar√° dentro de este componente, y es tu c√≥digo el que tomar√° las decisiones de movimiento adecuadas en funci√≥n de la informaci√≥n sensorial. En esto reside la inteligencia del cuadric√≥ptero y que su comportamiento sea bueno o no. El componente arranca en modo teleoperaci√≥n, para que puedas gobernar el movimiento del cuadric√≥ptero manualmente. Con el deslizador vertical se puede subir o bajar de altura y con la cruceta hacerlo girar y/o avanzar en horizontal.</p>

<ol>
  <li>
    <p>Antes de ejecutar tu algoritmo pulsa sobre el bot√≥n <strong>Play</strong>, y cat.py entra en modo autom√°tico invocando peri√≥dicamente a tu c√≥digo inserto en <strong>MyAlgorithm.py</strong>, el m√©todo execute. Lo llama unas 10 veces por segundo, lo que permite a tu software tener el control en todo momento del movimiento del drone.</p>
  </li>
  <li>
    <p>Para terminar con la ejecuci√≥n de tu algoritmo pulsa el bot√≥n <strong>Stop</strong>, que hace entrar a cat.py nuevamente en modo teleoperaci√≥n.</p>
  </li>
</ol>

<h3 id="ejecuci√≥n-del-mundo-del-campeonato-y-el-componente-cat_py"><strong>Ejecuci√≥n del mundo del campeonato y el componente cat_py</strong></h3>

<p>Con toda la infraestructura instalada ya podemos ejecutar el componente que utilizaremos en el campeonato.</p>

<p>En una terminal ejecuta el simulador:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/teaching_robotics/src/cat_py/gazebo
gazebo dronecampeones.wor
</code></pre></div></div>

<p>Ahora en otro terminal ejecutaremos el componente cat_py:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/teaching_robotics/src/cat_py/
python main.py <span class="nt">--Ice</span>.Config<span class="o">=</span>cat.cfg
</code></pre></div></div>

<p><br /></p>

<h2 id="prueba-el-juego-del-gato-y-el-rat√≥n-con-drones">Prueba: el juego del gato y el rat√≥n con drones</h2>

<p>La prueba consiste en programar en lenguaje Python la inteligencia de un drone cuadric√≥ptero que llamamos gato. Su objetivo es buscar, perseguir y mantenerse cerca de otro cuadric√≥ptero similar que llamamos rat√≥n. El gato tiene dos c√°maras (una frontal y otra ventral) y un sensor de posici√≥n 3D como equipamiento sensorial. Sus actuadores son los motores de sus h√©lices. El rat√≥n es de color rojo, para facilitar su detecci√≥n en las im√°genes.</p>

<p>Para la prueba se ha preparado un mundo 3D en el simulador Gazebo. En este nuevo mundo tendremos dos robots: el cuadric√≥ptero AR.Drone que hace de rat√≥n (que tiene color rojo) y el cuadric√≥ptero gato. No hay m√°s obst√°culos en el mundo, salvo el suelo. En el siguiente video se muestra un gato de ejemplo persiguiendo a un rat√≥n:</p>

<p><strong>Robot gato persiguiendo al rat√≥n</strong></p>

<div class="embed-container">
  <iframe src="https://www.youtube.com/embed/ykbw1kv6Cgw" width="700" height="480" frameborder="0" allowfullscreen="">
  </iframe>
</div>

<p><br /></p>

<p><strong>Mundo 3D simulado en Gazebo con gato y rat√≥n</strong></p>

<p><img src="/assets/images/activities/competitions/2016/pruebaGatoRaton.png" width="100%" height="60%" /></p>

<div class="embed-container">
  <iframe src="https://www.youtube.com/embed/C6_WPn7bR60" width="700" height="480" frameborder="0" allowfullscreen="">
  </iframe>
</div>

<p><br /></p>

<p>En la fase de preparaci√≥n puedes teleoperar un rat√≥n con la herramienta uav_viewer de JdeRobot conectado a √©l, mientras que cat.py se conecta al gato y ejecuta el c√≥digo que has preparado para √©l. Tambi√©n puedes dejar el rat√≥n quieto o programarle un comportamiento fijo. En la fase de competici√≥n del campeonato se pondr√°n varios ratones (componentes mouse) programados por la organizaci√≥n, que ser√°n los mismos para todos los participantes.</p>

<p><img src="/assets/images/activities/competitions/2016/arquitectura.png" width="100%" height="60%" /></p>

<h3 id="configuraci√≥n-del-entorno"><strong>Configuraci√≥n del entorno</strong></h3>

<p>Para configurar el entorno de la prueba hay que (1) lanzar Gazebo con el fichero del mundo adecuado, (2) ejecutar el componente mouse que gobierna el comportamiento del drone rat√≥n y (3) arrancar el cat.py que gobierna el comportamiento del drone gato. Opcionalmente (4) se puede lanzar tambi√©n el componente √°rbitro que se utilizar√° para medir la puntuaci√≥n de cada participante. Puedes lanzar el √°rbitro para ver si tu gato lo est√° haciendo mejor o peor en las pruebas de preparaci√≥n.</p>

<p>Para ejecutar Gazebo con este mundo realiza los siguientes pasos:</p>

<ul>
  <li>
    <p>cd ~/.gazebo/cfg/programaciondrones/</p>
  </li>
  <li>
    <p>gazebo gato_raton_1.world</p>
  </li>
</ul>

<p>El √°rbitro consta de un plugin y un visor. Mide la distancia real instant√°nea entre gato y rat√≥n y muestra en pantalla la evoluci√≥n temporal a lo largo de la duraci√≥n de la manga. Cuando est√° por debajo del umbral considerado cercano la pinta en verde y cuando est√° por encima, rojo. De este modo mide cu√°ntos segundos de esas ejecuciones tu gato ha estado suficientemente cerca del rat√≥n y lo muestra en pantalla.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Ejecuci√≥n de una prueba</strong></td>
      <td><strong>Gr√°fica del √°rbitro con la puntuaci√≥n final</strong></td>
    </tr>
    <tr>
      <td><img src="/assets/images/activities/competitions/2016/ejecucionPrueba.png" width="100%" height="100%" /></td>
      <td><img src="/assets/images/activities/competitions/2016/arbitro.png" width="100%" height="100%" /></td>
    </tr>
  </tbody>
</table>

<h3 id="programando-el-drone-gato-dentro-de-catpy"><strong>Programando el drone gato dentro de cat.py</strong></h3>

<p>El comportamiento del cuadric√≥ptero gato t√≠picamente tendr√° una parte perceptiva y una parte de control. La parte de percepci√≥n recoge los datos sensoriales (la c√°mara principalmente) y los analiza, extrae informaci√≥n de ellos. La parte de control decide qu√© movimiento es el adecuado y emite √≥rdenes a los motores del robot. Cat.py tiene naturaleza iterativa, ejecuta continuamente iteraciones y en cada una de ellas se percibe y se controla. El componente Cat.py se apoya en las interfaces ICE de JdeRobot para dialogar con el simulador Gazebo. En particular con los plugins de Gazebo que materializan los sensores y actuadores del cuadric√≥ptero. Todo este di√°logo queda oculto al programador, que simplemente tiene unos cuantos m√©todos en Python como interfaz de programaci√≥n para leer los datos de la c√°mara, del sensor GPS y motores del cuadric√≥ptero.</p>

<h3 id="recogiendo-im√°genes"><strong>Recogiendo im√°genes</strong></h3>

<p>Las im√°genes de la c√°mara frontal del gato se obtienen desde la clase MyAlgorithm. La instrucci√≥n siguiente nos devuelve la imagen de la c√°mara activa del drone y la almacena en la variable droneImage. A partir de este momento, dicha variable contiene una imagen que podremos tratar como queramos. Por ejemplo usando la biblioteca OpenCV de visi√≥n artificial.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>droneImage <span class="o">=</span> self.sensor.getImage<span class="o">()</span>
</code></pre></div></div>

<p>Puedes cambiar la c√°mara activa del drone invocando el siguiente m√©todo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.toggleCam<span class="o">()</span>
</code></pre></div></div>

<p>Para esta prueba necesitaremos detectar al robot rat√≥n. El rat√≥n es de color verde. T√≠picamente se localiza muy bien dentro de las im√°genes usando un filtro HSV convenientemente ajustado.</p>

<h3 id="leyendo-la-posici√≥n-y-orientaci√≥n-en-3d-gps-e-inclin√≥metros"><strong>Leyendo la posici√≥n y orientaci√≥n en 3D (GPS e inclin√≥metros)</strong></h3>

<p>En el escenario del campeonato se usan dos sistema de referencia: uno absoluto y otro solidario con el cuadric√≥ptero. Son los que se muestran en la Figura \ref{fig:drone_referencia}.</p>

<p><img src="/assets/images/activities/competitions/2016/droneCoordenadas.png" width="100%" height="60%" /></p>

<p>El seguimiento del rat√≥n se puede abordar sin necesidad de saber la posici√≥n absoluta del drone en el mundo. Sin embargo, puede ser √∫til si se quiere optimizar la b√∫squeda del rat√≥n cuando no se aprecia en la imagen. Para obtener la posici√≥n 3D se tiene el m√©todo <strong>getPose3D</strong>. Las instrucciones siguientes entregan las coordenadas X,Y y Z del drone dentro del mundo de Gazebo.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.getPose3D<span class="o">()</span>.x
self.sensor.getPose3D<span class="o">()</span>.y
self.sensor.getPose3D<span class="o">()</span>.z
</code></pre></div></div>

<p>Para obtener la orientaci√≥n (cuaterni√≥n) del drone:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.getPose3D<span class="o">()</span>.q0
self.sensor.getPose3D<span class="o">()</span>.q1
self.sensor.getPose3D<span class="o">()</span>.q2
self.sensor.getPose3D<span class="o">()</span>.q3
</code></pre></div></div>

<h3 id="ordenando-movimiento-a-los-motores-del-drone"><strong>Ordenando movimiento a los motores del drone</strong></h3>

<p>La clase sensor dentro de cat.py incluye varios m√©todos para interactuar con el drone y ordenarle movimiento. En particular el m√©todo sendCMDVel() env√≠a comandos de velocidad de traslaci√≥n y velocidades de rotaci√≥n. Las velocidades de traslaci√≥n siguen el sistema de referencia que se muestra en la figura anterior, solidario con el propio drone: vx de frente/atr√°s, vy izquierda/derecha y vz arriba/abajo. La velocidad de yaw marca el giro alrededor de un eje vertical, perpendicular al plano del drone. El m√©todo sendCMDVel() recibe 6 par√°metros: vy, vx, vz, yaw, roll y pitch. Cada uno de los valores se debe indicar entre -1 y 1. Los valores roll y pitch no tienen efecto en el mundo simulado de Gazebo.</p>

<p>Por ejemplo, el comando siguiente ordena al drone que se mueva de manera inmediata hacia delante a una velocidad de 0.5 (a la mitad de potencia). Esta √≥rden estar√° activa hasta que se le indique otra cosa.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.sendCMDVel<span class="o">(</span>0,0.5,0,0,0,0<span class="o">)</span>
</code></pre></div></div>

<p>El m√©todo sendCMDVel() permite comandar distintas √≥rdenes a la vez. El comando siguiente provoca que el drone se mueva hacia delante a una velocidad de 0.5, a la vez se traslade hacia la derecha a 0.4 y simult√°neamente se eleve en el eje Z a 0.2 y rote sobre el eje Z a una velocidad de 0.1.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.sendCMDVel<span class="o">(</span><span class="nt">-0</span>.4,0.5,0.2,0.1,0,0<span class="o">)</span>
</code></pre></div></div>

<p>Finalmente, para detener el movimiento del drone se puede utilizar la siguiente instrucci√≥n.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.sensor.sendCMDVel<span class="o">(</span>0,0,0,0,0,0<span class="o">)</span>
</code></pre></div></div>

<h3 id="insertando-tu-c√≥digo"><strong>Insertando tu c√≥digo</strong></h3>

<p>Para implementar el algoritmo se recomienda seguir los siguientes pasos:</p>

<ol>
  <li>
    <p>Abre con tu entorno de programaci√≥n el componente cat.py y dir√≠gete a la clase MyAlgorithm que se encuentra en el fichero <strong>cat/MyAlgorithm.py</strong>.</p>
  </li>
  <li>
    <p>Dir√≠gite a la definici√≥n del m√©todo execute().</p>
  </li>
  <li>
    <p>En primer lugar se recomienda implementar un m√©todo que nos permita detectar en la imagen obtenida del drone rat√≥n, obteniendo su posici√≥n en p√≠xeles. T√≠picamente el centro de masas de los p√≠xeles que superan el filtro rojo puede ser una buena aproximaci√≥n del centro del robot rat√≥n (hay otras mejores).</p>
  </li>
  <li>
    <p>Con el robot rat√≥n detectado en la imagen, el siguiente paso es decidir qu√© movimiento es el adecuado ordenar a los motores del gato con el m√©todo sendCMDVel(). Aqu√≠ hay muchas maneras de decidirlo: control basado en casos, control PID, aut√≥matas, etc.. Aqu√≠ es donde entra en juego tu habilidad.</p>
  </li>
</ol>

<h3 id="evaluando-tu-algoritmo"><strong>Evaluando tu algoritmo</strong></h3>

<p>Para determinar la puntuaci√≥n de t√∫ algoritmo hemos creado un √°rbrito, este componente calcular√° la distancia a la que se encuentra tu gato del rat√≥n durante 2 minutos. Mientras que el gato se encuentre cerca del rat√≥n se incrementar√° la puntuaci√≥n, si tu gato no est√° lo suficientemente cerca del gato no puntuar√°.</p>

<p>Ejecuci√≥n de los componentes para la evaluaci√≥n del algoritmo. Copia al directorio del gato el fichero de configuraci√≥n del √°rbrito:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /usr/local/share/jderobot/conf/refereeViewer.cfg ~/teaching_robotics/src/cat_py/
</code></pre></div></div>

<p>En un terminal lanza el mundo dronecampeones.world:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/teaching_robotics/src/cat_py/gazebo
gazebo dronecampeones.world
</code></pre></div></div>

<p>En otro terminal ejecuta tu gato:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/teaching_robotics/src/cat_py/
python main.py <span class="nt">--Ice</span>.Config<span class="o">=</span>cat.cfg
</code></pre></div></div>

<p>En otro terminal, prepara (sin ejecutar) el rat√≥n:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/teaching_robotics/src/trainning_mouse_x64/
</code></pre></div></div>

<p>En otro terminal, prepara (sin ejecutar) el √°rbrito:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/teaching_robotics/src/cat_py/
</code></pre></div></div>

<p>Despega tu gato con el bot√≥n Take off del componente cat_py y a continuaci√≥n pulsa sobre el bot√≥n Play para ejecutar el algoritmo.</p>

<p>De manera simult√°nea, ejecuta el rat√≥n:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./trainning_mouse <span class="nt">--Ice</span>.Config<span class="o">=</span>trainning.cfg
</code></pre></div></div>

<p>y el √°rbitro:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>refereeViewer <span class="nt">--Ice</span>.Config<span class="o">=</span>refereeViewer.cfg
</code></pre></div></div>

<p><br /></p>

<h2 id="ratones-para-el-campeonato">Ratones para el campeonato</h2>

<h3 id="rat√≥n-de-entrenamiento"><strong>Rat√≥n de entrenamiento</strong></h3>

<p>Para implementar el algoritmo de seguimiento del campeonato os hemos preparado un rat√≥n de entrenamiento que implementa la mayor√≠a de movimientos que tendr√°n los ratones de las mangas puntuables. Este rat√≥n tiene una dificultad incremental, empezando con unos movimientos muy simples a la velocidad m√≠nima, continuando con unos movimientos m√°s complejos a una velocidad media y terminando con movimientos a√∫n m√°s complejos a la m√°xima velocidad.</p>

<div class="embed-container">
  <iframe src="https://www.youtube.com/embed/uuHWCvgGzog" width="700" height="480" frameborder="0" allowfullscreen="">
  </iframe>
</div>

<p><br /></p>

<p>Pod√©is descargarlo en el siguiente enlace:</p>

<ul>
  <li>
    <p><a href="jderobot.org/store/amartinflorido/uploads/campeonato/trainning_mouse_x64.tar.gz">Rat√≥n de entrenamiento 64 bits</a>.</p>
  </li>
  <li>
    <p><a href="jderobot.org/store/amartinflorido/uploads/campeonato/trainning_mouse_x32.tar.gz">Rat√≥n de entrenamiento 32 bits</a>.</p>
  </li>
</ul>

<h3 id="ejecuci√≥n-del-rat√≥n-de-entrenamiento"><strong>Ejecuci√≥n del rat√≥n de entrenamiento</strong></h3>

<p>Una vez descargado y descomprimido, puedes copiar o mover el rat√≥n de entrenamiento al directorio teaching_robotics:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> <span class="nt">-r</span> trainning_mouse_x64/ ~/teaching_robotics/src/
</code></pre></div></div>

<p>Lanza el mundo dronecampeones.world:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/teaching_robotics/src/cat_py/gazebo
gazebo dronecampeones.world
</code></pre></div></div>

<p>En otro terminal ejecuta el rat√≥n:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/teaching_robotics/src/trainning_mouse_x64/
./trainning_mouse <span class="nt">--Ice</span>.Config<span class="o">=</span>trainning.cfg
</code></pre></div></div>

<p><br /></p>

<h2 id="organizaci√≥n-evaluaci√≥n-y-premio">Organizaci√≥n, evaluaci√≥n y premio</h2>

<font color="red">Para participar es OBLIGATORIO inscribirse env√≠ando un correo a josemaria.plaza AT urjc.es</font>
<p>antes del 15 de marzo (para dimensionar y poder organizarlo bien). Cada participante deber inscribirse individualmente.</p>

<p>Despues hay que programar, retocando el fichero <strong>MyAlgorithm.py</strong> (el m√©todo <strong>execute</strong>) adecuadamente, y enviarlo a la organizaci√≥n por correo electr√≥nico (josemaria.plaza AT urjc.es) antes del <strong>5 de abril 2016 (23:00 horas UTC)</strong> junto con los datos personales. Pasado ese d√≠a la organizaci√≥n publicar√° en la web la lista de todos los participantes. Las finales del campeonato tendr√°n lugar el <strong>8 de abril de 2016</strong>. Ese d√≠a se retransmitir√° en streaming por YouTube la sesi√≥n final (Q3). Si el volumen de participantes lo permite, tambi√©n las sesiones eliminatorias Q1 y Q2.</p>

<p>La evaluaci√≥n consiste arrancar a tu robot gato en diferentes configuraciones (2 mangas) con el robot rat√≥n que hemos preparado y en una m√°quina de la organizaci√≥n. Tu fichero <strong>MyAlgorithm.py</strong> se incorporar√° a <strong>cat.py</strong> para que gobierne el comportamiento del cuadric√≥ptero. La m√°quina y el comportamiento del rat√≥n es exactamente el mismo para todos los participantes. En cada manga, de 2 minutos, tu robot comienza en una posici√≥n relativa diferente respecto del rat√≥n, deber√° buscarlo y perseguirlo. El componente √°rbitro mide cu√°ntos segundos de esas ejecuciones tu gato ha estado suficientemente cerca del rat√≥n y lo muestra en pantalla. Esa es la puntuaci√≥n. Que tu gato toque al rat√≥n supone la descalificaci√≥n en esa manga y el participante reune 0 puntos en ella.</p>

<p>El campeonato est√° organizado en fases eliminatorias, donde tu gato se va enfrentando paulatinamente a ratones m√°s dif√≠ciles de seguir. Tras la primera ronda (Q1) pasan a la siguiente los mejores 20 gatos, en la segunda (Q2) los mejores 10 y en la √∫ltima (Q3) ya se deciden las posiciones definitivas en el campeonato. Gana el campeonato aquel gato que est√© cerca del rat√≥n durante m√°s tiempo en el acumulado de las dos mangas de Q3.</p>

<p>El premio para el ganador es un cuadric√≥ptero Ar.Drone2 de Parrot, patrocinado por la ETS Ing.Telecomunicaci√≥n (ETSIT) de la URJC. El jurado ser√° una comisi√≥n de la ETSIT-URJC, que podr√° dejar el premio desierto si la soluci√≥n no es de suficiente calidad. Sus decisiones son inapelables. El campeonato terminar√° con la entrega de premios, es obligatorio que el ganador est√© presente f√≠sicamente o por videoconferencia para que recoja el premio.</p>

<h3 id="reglamento"><strong>Reglamento</strong></h3>

<p><a href="http://jderobot.org/store/jmplaza/uploads/campeonato-drones/reglamento-campeonatodrones.pdf">Borrador del reglamento</a>. Est√° sujeto a cambios, a medida que lo vamos perfeccionando.</p>

<p><br /></p>

<h2 id="preguntas-frecuentes">Preguntas frecuentes</h2>

<h3 id="qui√©nes-pueden-participar"><strong>¬øQui√©nes pueden participar?</strong></h3>

<p>Cualquiera, es un campeonato abierto. Est√° dirigido a estudiantes universitarios de ingenier√≠a, principalmente a los de la Universidad Rey Juan Carlos, pero est√° abierto a cualquier participante.</p>

<h3 id="puedo-utilizar-otro-middleware-para-acceder-al-robot-a√©reo"><strong>¬øPuedo utilizar otro middleware para acceder al robot a√©reo?</strong></h3>

<p>Para el campeonato, no. M√°s all√° del campeonato, usa el que quieras :-). Para que la comparativa sea justa todos los participantes utilizar√°n la misma versi√≥n del simulador Gazebo y la misma versi√≥n del middleware JdeRobot. De hecho han de entregar su c√≥digo en un fichero MyAlgorithms.py que se prueba dentro del componente Introrob.py que hemos desarrollado para este campeonato.</p>

<p><br /></p>

<h2 id="patrocinadores">Patrocinadores</h2>

<!-- Patrocinadores -->
<p><img src="/assets/images/activities/competitions/2016/circulos1600.png" width="22%" height="60%" />
<img src="/assets/images/activities/competitions/2016/etsit.png" width="22%" height="60%" />
<img src="/assets/images/activities/competitions/2016/logoUrjc.png" width="25%" height="80%" />
<img src="/assets/images/activities/competitions/2016/gmv.jpg" width="25%" height="80%" /></p>

:ET